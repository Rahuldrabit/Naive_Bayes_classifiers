# -*- coding: utf-8 -*-
"""Naive Bayes Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C5w0o0bcDu992P6QSwpSdap0eW0BVhz4

# naive bayes theorem

#import library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

"""#Load Iris"""

iris=load_iris()

df=pd.DataFrame(iris.data,columns=iris.feature_names)

print(iris.target_names)

df.head()

df.columns

df['species']=iris.target
df.head()

print(iris.target_names)

df['species']=pd.Categorical.from_codes(iris.target,iris.target_names)
df.head()

"""#checking Null"""

df.isnull().any()

"""#Checking Normal Distribution"""

df.describe()

for column in df.columns:
    if column!='species':
        sns.distplot(df[column])
        plt.show()

for column in df.columns[:-1]:
    sns.histplot(df[column],kde=True)
    plt.show()

"""#checking Outliers"""

sns.boxplot(data=df,orient='h')
#sns.boxplot(data=df)
plt.title("Box plot for detecting Outliers")
plt.show()

"""#deleting Outliers"""

column='sepal length (cm)'
Q1=df[column].quantile(0.25)
Q3=df[column].quantile(0.75)
IQR=Q3-Q1
lower_bound=Q1-1.5*IQR
upper_bound=Q3+1.5*IQR
df=df[(df[column]>=lower_bound) & (df[column]<=upper_bound)]

"""#Split data"""

feature_columns=iris.feature_names
#x=df[feature_columns]
#y=df['species']
#x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
x_train,x_test,y_train,y_test=train_test_split(df[feature_columns],df['species'],test_size=0.2,random_state=42)

"""#scaling"""

scaler=StandardScaler()
scaler.fit(x_train)
x_train_scaled=scaler.transform(x_train)
x_test_scaled=scaler.transform(x_test)

"""#Gaussian neive Bayes

Train Model
"""

model=GaussianNB()
model.fit(x_train_scaled,y_train)

"""#test model"""

y_pred=model.predict(x_test_scaled)
accuracy=accuracy_score(y_test,y_pred)
print("Accuracy:",accuracy)
cm=confusion_matrix(y_test,y_pred)
print("confusion matrix:\n",cm)
print("Classification Report:\n"+(classification_report(y_test,y_pred)))

cm_df=pd.DataFrame(cm,index=iris.target_names,columns=iris.target_names)
print("Confusion Matrix:")
print(cm_df)
plt.figure(figsize=(8,6))
sns.heatmap(cm_df,annot=True,fmt='d',cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.show()

"""#Bernoulli  Neive Bayes Train Model"""

#import numpy as np
#rng = np.random.RandomState(1)
#X = rng.randint(5, size=(6, 100))
#Y = np.array([1, 2, 3, 4, 4, 5])
from sklearn.naive_bayes import BernoulliNB
clf = BernoulliNB()
clf.fit(x_train_scaled,y_train)
print(clf.predict(x_train_scaled[2:3]))

y_pred=clf.predict(x_test_scaled)
accuracy=accuracy_score(y_test,y_pred)
print("Accuracy:",accuracy)
cm=confusion_matrix(y_test,y_pred)
print("confusion matrix:\n",cm)
print("Classification Report:\n"+(classification_report(y_test,y_pred)))

cm_df=pd.DataFrame(cm,index=iris.target_names,columns=iris.target_names)
print("Confusion Matrix:")
print(cm_df)
plt.figure(figsize=(8,6))
sns.heatmap(cm_df,annot=True,fmt='d',cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.show()

"""#Multinomial Neive Bayes"""

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(x_train)
x_train_scaled=scaler.transform(x_train)
x_test_scaled=scaler.transform(x_test)

from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB()
clf.fit(x_train_scaled,y_train)

y_pred=clf.predict(x_test_scaled)
accuracy=accuracy_score(y_test,y_pred)
print("Accuracy:",accuracy)
cm=confusion_matrix(y_test,y_pred)
print("confusion matrix:\n",cm)
print("Classification Report:\n"+(classification_report(y_test,y_pred)))

cm_df=pd.DataFrame(cm,index=iris.target_names,columns=iris.target_names)
print("Confusion Matrix:")
print(cm_df)
plt.figure(figsize=(8,6))
sns.heatmap(cm_df,annot=True,fmt='d',cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.show()